from aiogram import Dispatcher, types
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from utils import get_track, rate_limiter
from database import get_favorites, save_favorite, get_top_queries
import logging


async def start_handler(message: types.Message):
    await message.reply("–ü—Ä–∏–≤—ñ—Ç! üëã –í–≤–µ–¥–∏ –Ω–∞–∑–≤—É –ø—ñ—Å–Ω—ñ –∞–±–æ –≤–∏–∫–æ–Ω–∞–≤—Ü—è, —â–æ–± —è –º—ñ–≥ —ó—ó –∑–Ω–∞–π—Ç–∏.")


async def getid_handler(message: types.Message):
    if message.forward_from_chat:
        await message.reply(f"üìå Chat ID: `{message.forward_from_chat.id}`", parse_mode="Markdown")
    else:
        await message.reply("‚ÑπÔ∏è –ü–µ—Ä–µ—à–ª–∏ –º–µ–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –∫–∞–Ω–∞–ª—É, —ñ —è —Å–∫–∞–∂—É —Ç–æ–±—ñ –π–æ–≥–æ Chat ID.")


async def popular_handler(message: types.Message):
    top = get_top_queries()
    if not top:
        await message.reply("–ü–æ–∫–∏ –Ω–µ–º–∞—î –ø–æ–ø—É–ª—è—Ä–Ω–∏—Ö –∑–∞–ø–∏—Ç—ñ–≤.")
        return

    result = "üî• –ù–∞–π–ø–æ–ø—É–ª—è—Ä–Ω—ñ—à—ñ –∑–∞–ø–∏—Ç–∏:\n\n"
    for i, (query, count) in enumerate(top, start=1):
        result += f"{i}. {query} ‚Äî {count} —Ä–∞–∑(—ñ–≤)\n"
    await message.reply(result)


async def favorites_handler(message: types.Message):
    favs = get_favorites(message.from_user.id)
    if not favs:
        await message.reply("–£ –≤–∞—Å –ø–æ–∫–∏ –Ω–µ–º–∞—î –æ–±—Ä–∞–Ω–∏—Ö —Ç—Ä–µ–∫—ñ–≤.")
        return

    for file_id, title, artist in favs:
        await message.answer_audio(
            audio=file_id,
            title=title,
            performer=artist,
            caption=f"üéµ {title} ‚Äî {artist}"
        )


async def callback_handler(callback: types.CallbackQuery):
    data = callback.data
    if data.startswith("fav:"):
        file_id = data.split(":")[1]
        user_id = callback.from_user.id
        title = callback.message.audio.title if callback.message.audio else ""
        performer = callback.message.audio.performer if callback.message.audio else ""
        save_favorite(user_id, file_id, title, performer)
        await callback.answer("‚úÖ –î–æ–¥–∞–Ω–æ –≤ –æ–±—Ä–∞–Ω–µ")


@rate_limiter(3)
async def search_handler(message: types.Message):
    query = message.text.strip()
    logging.info(f"üîé –ó–∞–ø–∏—Ç –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: {query}")
    track = await get_track(query, message.from_user.id)

    if not track:
        await message.reply("–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤. –°–ø—Ä–æ–±—É–π—Ç–µ —ñ–Ω—à–∏–π –∑–∞–ø–∏—Ç.")
        return

    keyboard = InlineKeyboardMarkup().add(
        InlineKeyboardButton("‚≠ê –î–æ–¥–∞—Ç–∏ –≤ –æ–±—Ä–∞–Ω–µ", callback_data=f"fav:{track['file_id']}")
    )

    await message.answer_audio(
        audio=track["file_id"],
        title=track["title"],
        performer=track["artist"],
        caption=f"üéµ {track['title']} ‚Äî {track['artist']}",
        reply_markup=keyboard
    )


def register_handlers(dp: Dispatcher):
    dp.register_message_handler(start_handler, commands=["start"])
    dp.register_message_handler(getid_handler, commands=["getid"])
    dp.register_message_handler(popular_handler, commands=["popular"])
    dp.register_message_handler(favorites_handler, commands=["favorites"])
    dp.register_callback_query_handler(callback_handler, lambda c: c.data and c.data.startswith("fav:"))
    dp.register_message_handler(search_handler, content_types=types.ContentType.TEXT)

