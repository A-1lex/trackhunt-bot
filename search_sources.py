import aiohttp
import logging
from bs4 import BeautifulSoup
import urllib.parse

# –ê–∫—Ç—É–∞–ª—å–Ω—ñ —Å–∞–π—Ç–∏ –¥–ª—è –ø–æ—à—É–∫—É –º—É–∑–∏–∫–∏ (Free Music Archive, Jamendo, Internet Archive)
SEARCH_SITES = [
    "freemusicarchive.org",
    "jamendo.com",
    "archive.org/details/audio"
]

HEADERS = {
    "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 Chrome/120.0.0.0 Safari/537.36"
}

async def search_music_links(query: str):
    """
    –®—É–∫–∞—î –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ MP3-—Ñ–∞–π–ª–∏ —á–µ—Ä–µ–∑ Google –¥–ª—è –∑–∞–ø–∏—Ç—É query,
    –æ–±–º–µ–∂—É—é—á–∏ –ø–æ—à—É–∫ –∑–∞–∑–Ω–∞—á–µ–Ω–∏–º–∏ —Å–∞–π—Ç–∞–º–∏ –∑ –∞–∫—Ç—É–∞–ª—å–Ω–∏—Ö –¥–∂–µ—Ä–µ–ª.
    """
    results = []
    for site in SEARCH_SITES:
        search_query = f"site:{site} {query} mp3"
        encoded_query = urllib.parse.quote_plus(search_query)
        search_url = f"https://www.google.com/search?q={encoded_query}"
        try:
            async with aiohttp.ClientSession() as session:
                async with session.get(search_url, headers=HEADERS, timeout=10) as response:
                    if response.status == 200:
                        html = await response.text()
                        soup = BeautifulSoup(html, "html.parser")
                        for a in soup.find_all("a"):
                            href = a.get("href")
                            if href and site in href:
                                # –û–±—Ä–æ–±–∫–∞ –ø–æ—Å–∏–ª–∞–Ω—å —É —Ñ–æ—Ä–º–∞—Ç—ñ /url?q=<url>&sa=...
                                if href.startswith("/url?q="):
                                    clean = href.split("/url?q=")[1].split("&sa=")[0]
                                    if clean not in results:
                                        results.append(clean)
                                else:
                                    if href not in results:
                                        results.append(href)
                    else:
                        logging.warning(f"–ü–æ—à—É–∫–æ–≤–∞ —Å–∏—Å—Ç–µ–º–∞ –ø–æ–≤–µ—Ä–Ω—É–ª–∞ —Å—Ç–∞—Ç—É—Å {response.status} –¥–ª—è —Å–∞–π—Ç—É {site}")
        except Exception as e:
            logging.warning(f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Ç—É –¥–æ Google –¥–ª—è {site}: {e}")
    logging.info(f"üîé –ó–Ω–∞–π–¥–µ–Ω–æ {len(results)} –ø–æ—Å–∏–ª–∞–Ω—å –¥–ª—è –∑–∞–ø–∏—Ç—É: '{query}'")
    return results
