import time
from aiogram import types
from collections import defaultdict, deque
from functools import wraps

# –ê–Ω—Ç–∏—Å–ø–∞–º –∫–æ–Ω—Ç—Ä–æ–ª—å: –æ—Å—Ç–∞–Ω–Ω—ñ –∑–∞–ø–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
user_requests = defaultdict(lambda: deque(maxlen=20))

def rate_limiter(seconds: int = 2, max_per_minute: int = 10):
    user_timestamps = {}

    def decorator(func):
        @wraps(func)
        async def wrapped(message: types.Message, *args, **kwargs):
            user_id = message.from_user.id
            now = time.time()

            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–∞—Ç—Ä–∏–º–∫–∏ –º—ñ–∂ –∑–∞–ø–∏—Ç–∞–º–∏
            if user_id in user_timestamps and (now - user_timestamps[user_id]) < seconds:
                await message.reply("‚è≥ –ó–∞–Ω–∞–¥—Ç–æ —à–≤–∏–¥–∫–æ. –ó–∞—á–µ–∫–∞–π—Ç–µ –∫—ñ–ª—å–∫–∞ —Å–µ–∫—É–Ω–¥.")
                return

            # –õ—ñ–º—ñ—Ç –∑–∞ —Ö–≤–∏–ª–∏–Ω—É
            user_requests[user_id].append(now)
            recent = [t for t in user_requests[user_id] if now - t < 60]
            if len(recent) > max_per_minute:
                await message.reply("üö´ –ó–∞–±–∞–≥–∞—Ç–æ –∑–∞–ø–∏—Ç—ñ–≤. –ó–∞—á–µ–∫–∞–π—Ç–µ —Ç—Ä–æ—Ö–∏.")
                return

            user_timestamps[user_id] = now
            return await func(message, *args, **kwargs)

        return wrapped
    return decorator
